#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* next;
};
struct node* createNode(int data){
    struct node* newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=data;
    newNode->next=NULL;
    return newNode;
} 
void insertAtEnd(struct node* *head,int data){
    struct node *newNode=createNode(data);
    if(*head==NULL){
        *head=newNode;
        return;
    }
    struct node* temp=*head;
    while(temp->next != NULL){
        temp=temp->next;
    }
    temp->next=newNode;
}
void printList(struct node* head){
    struct node* temp=head;
    while(temp != NULL){
        printf("%d-> ",temp->data);
        temp=temp->next;
    }
    printf("NULL\n");
}

void sortList(struct node *head){
    if(head==NULL || head->next==NULL){
        return;
    }
    struct node* i, *j;
    int temp;
    for(i=head; i!=NULL; i=i->next){
        for(j=i->next; j!=NULL; j=j->next){
            if(i->data > j->data){
                temp=i->data;
                i->data=j->data;
                j->data=temp;
            }
        }
    }
}

void reverseList(struct node* *head){
    struct node *current=*head, *prev=NULL, *next=NULL;
    while(current!=NULL){
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    *head=prev;
}

void concatenateLists(struct node* *head1, struct node *head2){
    if(*head1==NULL){
        *head1=head2;
        return;
    }
    struct node* temp=*head1;
    while(temp->next != NULL){
        temp=temp->next;
    }
    temp->next=head2;
}

int main(){
    struct node *List1=NULL;
    struct node *List2=NULL;
    
    insertAtEnd(&List1,10);
    insertAtEnd(&List1,5);
    insertAtEnd(&List1,20);
    insertAtEnd(&List1,15);
    
    insertAtEnd(&List2,25);
    insertAtEnd(&List2,30);
    
    printf("List 1:\n");
    printList(List1);
    printf("\nList 2:\n");
    printList(List2);
    
    printf("\nSorting list 1:\n");
    sortList(List1);
    printList(List1);
    printf("\nReversing List 1:\n");
    reverseList(&List1);
    printList(List1);
    printf("\nConcatinating List1 and List2:\n");
    concatenateLists(&List1,List2);
    printList(List1);
    
    return 0;
}








